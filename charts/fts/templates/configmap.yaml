apiVersion: v1
kind: ConfigMap
metadata:
  name: fts3config
data:
  fts3config: |-
    Alias=rucio/fts
    SiteName=DOCKER

    AuthorizedVO=*

    DbType=mysql
    DbUserName=fts
    DbPassword={{.Values.ftsdb_password}}
    DbConnectString=ftsdb/fts

    LogLevel=DEBUG

    MinRequiredFreeRAM = 16
    MaxUrlCopyProcesses = 4

    StagingBulkSize = 1
    StagingWaitingFactor = 1

    [roles]
    Public = all:transfer;all:config;all:datamanagement


  fts3restconfig: |-
    SiteName=DOCKER

    AuthorizedVO=*

    DbType=mysql
    DbUserName=fts
    DbPassword={{.Values.ftsdb_password}}
    DbConnectString=ftsdb/fts

    #OpenID parameters
    ValidateAccessTokenOffline=True
    JWKCacheSeconds=86400
    TokenRefreshDaemonIntervalInSeconds=600

    #The alias used for the FTS endpoint, will be published as such in the dashboard transfers UI http://dashb-wlcg-transfers.cern.ch/ui/
    Alias=rucio/fts

    MonitoringMessaging=false

    [sqlalchemy]
    pool_timeout=10
    pool_size=10

    [roles]
    Public = vo:transfer;all:datamanagement
    lcgadmin = all:config

    # Logging configuration
    [loggers]
    keys = root, routes, fts3rest, sqlalchemy

    [handlers]
    keys = console, log_file

    [formatters]
    keys = generic

    [logger_root]
    level = INFO
    handlers = log_file

    [logger_routes]
    level = INFO
    handlers =
    qualname = routes.middleware
    # "level = DEBUG" logs the route matched and routing variables.

    [logger_fts3rest]
    level = INFO
    handlers =
    qualname = fts3rest

    [logger_sqlalchemy]
    level = WARN
    handlers =
    qualname = sqlalchemy.engine
    # "level = INFO" logs SQL queries.
    # "level = DEBUG" logs SQL queries and results.
    # "level = WARN" logs neither.  (Recommended for production systems.)

    [handler_console]
    class = StreamHandler
    args = (sys.stderr,)
    level = NOTSET
    formatter = generic

    [handler_log_file]
    class = logging.FileHandler
    args = ('/var/log/fts3rest/fts3rest.log', 'a')
    level = NOTSET
    formatter = generic

    [formatter_generic]
    format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(module)s] %(message)s
    datefmt = %H:%M:%S


  docker-entrypoint.sh: |-
    #!/bin/bash

    # wait for MySQL readiness
    /usr/local/bin/wait-for-it.sh -h ftsdb -p 3306 -t 3600

    # initialise / upgrade the database
    mysql -h ftsdb -u fts --password={{.Values.ftsdb_password}} fts < $(ls /usr/share/fts-mysql/fts-schema* | sort -t '-' -k '4n' | tail -n 1)
    # TODO: go back to using this script once the fixed it and bundled with the new fts version:
    # /usr/share/fts/fts-database-upgrade.py -y

    # fix Apache configuration
    /usr/bin/sed -i 's/Listen 80/#Listen 80/g' /etc/httpd/conf/httpd.conf
    cp /opt/rh/httpd24/root/usr/lib64/httpd/modules/mod_rh-python36-wsgi.so /lib64/httpd/modules
    cp /opt/rh/httpd24/root/etc/httpd/conf.modules.d/10-rh-python36-wsgi.conf /etc/httpd/conf.modules.d

    # startup the FTS services
    /usr/sbin/fts_server               # main FTS server daemonizes
    /usr/sbin/fts_msg_bulk             # daemon to send messages to activemq
    /usr/sbin/fts_bringonline          # daemon to handle staging requests
    /usr/sbin/httpd -DFOREGROUND       # FTS REST frontend & FTSMON



  fts3rest.conf: |-
    # Load required modules
    <IfModule !wsgi_module>
      LoadModule wsgi_module modules/mod_wsgi.so
    </IfModule>
    <IfModule !ssl_module>
      LoadModule ssl_module modules/mod_ssl.so
    </IfModule>
    <IfModule !gridsite_module>
      LoadModule gridsite_module modules/mod_gridsite.so
    </IfModule>
    <IfModule !version_module>
        LoadModule version_module modules/mod_version.so
    </IfModule>

    WSGISocketPrefix run/wsgi

    # Enable REST interface in port 8446
    Listen 8446
    <VirtualHost *:8446>
      # SSL configuration
      SSLProtocol all -SSLv2 -SSLv3
      SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:!aNULL:!MD5:!RC4
      SSLHonorCipherOrder on

      # Certificates
      SSLCertificateFile /etc/grid-security/hostcert.pem
      SSLCertificateKeyFile /etc/grid-security/hostkey.pem
      # SSLCACertificateFile /etc/grid-security/certificates/5fca1cb1.0
      SSLCACertificatePath /etc/grid-security/certificates

      # Require client certificate
      SSLVerifyClient optional
      SSLVerifyDepth  10

      # Disable the session files of libgridsite
      GridSiteGridHTTP off
      GridSiteAutoPasscode off

      # Export environment variables with SSL information
      # Needed by FTS3 REST interface
      <IfVersion >= 2.4>
            SSLOptions +StdEnvVars +ExportCertData +StdEnvVars +LegacyDNStringFormat
      </IfVersion>
      <IfVersion < 2.4>
            SSLOptions +StdEnvVars +ExportCertData +StdEnvVars
      </IfVersion>

      # Enable SSL in this port
      SSLEngine on

      # Logs
      ErrorLog logs/fts3rest_error_log

      LogFormat "%a %l %u %t \"%r\" %>s %b %D"
      TransferLog logs/fts3rest_access_log

      LogLevel debug

      # Send everything to the FTS3 REST interface
      WSGIScriptAlias / /usr/libexec/fts3rest/fts3rest.wsgi

      # Encoded slashes must be kept
      AllowEncodedSlashes NoDecode

      <Location />
            <IfVersion >= 2.4>
                Require all granted
            </IfVersion>
            <IfVersion < 2.4>
                Order allow,deny
                Allow from all
            </IfVersion>
      </Location>

      # For OAuth2 support, the Authentication header needs to be passed
      WSGIPassAuthorization On

      # We need to avoid the underlying libraries (i.e. Globus) from modifying the status
      # of the server process (httpd), so isolate the application
      WSGIDaemonProcess fts3rest processes=2 threads=15 maximum-requests=3000 display-name=fts3rest user=fts3 group=fts3
      WSGIProcessGroup fts3rest
      WSGIApplicationGroup %{GLOBAL}

      # Headers
      Header Set "X-Frame-Options" "DENY"
    </VirtualHost>




